services:
  app:
    image: fastapi-otel:1.0.3
    restart: always
    container_name: fastapi-app
    environment:
      OTEL_SERVICE_NAME: checkout-api-3
      OTEL_SERVICE_VERSION: "1.0.1"
      DEPLOYMENT_ENVIRONMENT: dev

      # اصلاح شده: اپ به otelcol می‌فرستد (نام سرویس صحیح)
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otelcol:4317  # ✅ نام سرویس صحیح
      OTEL_EXPORTER_OTLP_INSECURE: "true"  # ✅ اضافه شد
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      OTEL_PYTHON_METRICS_EXPORTER: otlp
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"

    ports:
      - "3001:8000"
    depends_on:
      - clickhouse
      - postgres
      - redis
      - uptrace
      - otelcol
    networks:
      - filebeat_custom_network

  clickhouse:
    image: clickhouse/clickhouse-server:25.3.5
    restart: always
    environment:
      CLICKHOUSE_USER: uptrace
      CLICKHOUSE_PASSWORD: uptrace
      CLICKHOUSE_DB: uptrace
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'localhost:8123/ping']
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - ch_data:/var/lib/clickhouse
    ports:
      - '8123:8123'
      - '9000:9000'
    networks:
      - filebeat_custom_network
  postgres:
    image: postgres:17-alpine
    restart: on-failure
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: uptrace
      POSTGRES_PASSWORD: uptrace
      POSTGRES_DB: uptrace
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U uptrace -d uptrace']
      interval: 1s
      timeout: 1s
      retries: 30
    volumes:
      - 'pg_data3:/var/lib/postgresql/data/pgdata'
    ports:
      - '5432:5432'
    networks:
      - filebeat_custom_network
  redis:
    image: redis:6.2.2-alpine
    restart: on-failure
    networks:
      - filebeat_custom_network
  uptrace:
    image: 'uptrace/uptrace:2.0.1'
    restart: on-failure
    environment:
      - UPTRACE_HTTP_COOKIE_SAME_SITE=None
      - UPTRACE_HTTP_CORS_ALLOWED_ORIGINS=http://localhost:14318
    volumes:
      - ./uptrace.yml:/etc/uptrace/config.yml
      - ./certs/server.crt:/etc/uptrace/server.crt
      - ./certs/server.key:/etc/uptrace/server.key
    ports:
      - '14317:4317'
      - '14318:80'
    depends_on:
      - clickhouse
      - postgres
      - redis
    networks:
      - filebeat_custom_network
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.123.0
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    restart: on-failure
    volumes:
      - ./otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 8888:8888
    depends_on:
      - clickhouse
      - postgres
      - redis
      - uptrace
    networks:
      - filebeat_custom_network
  
  prometheus:
    image: prom/prometheus:v2.36.2
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - filebeat_custom_network
    depends_on:
      - otelcol
      - app

  grafana:
    image: grafana/grafana:12.0.0
    restart: on-failure
    volumes:
      - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/custom.ini:/etc/grafana/grafana.ini
    ports:
      - '3000:3000'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - filebeat_custom_network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    command: ["-config.file=/etc/loki/loki-config.yaml"]
    ports:
      - 3100:3100
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yaml
      - loki_data:/loki 
    networks:
      - filebeat_custom_network

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    restart: on-failure
    ports:
      - "3200:3200"   # HTTP API / Query / health / metrics
      - "4317:4317"   # OTLP gRPC ingest
      - "4318:4318"   # OTLP HTTP ingest (اختیاری)
    volumes:
      - ./tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    networks:
      - filebeat_custom_network
    depends_on:
      - otelcol
    

volumes:
  ch_data:
  pg_data3:
  prometheus_data:
  loki_data:
  tempo_data:


networks:
  filebeat_custom_network:
  